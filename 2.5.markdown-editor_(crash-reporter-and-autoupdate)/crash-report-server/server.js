const express = require('express')
const multer = require('multer')
const bodyParser = require('body-parser')
const uuid = require('uuid')
const writeFile = require('write-file')
const path = require('path')
const http = require('http')

//Express is a simple web server library for Node.js
const app = express()
const server = http.createServer(app)

//bodyParser library is middleware for Express to work with the body of HTTP requests
app.use(bodyParser.urlencoded({ extended: false }))

//paths in the filesystem where to store crashes and uncaught exceptions reports
const crashesPath = path.join(__dirname, 'crashes')
const exceptionsPath = path.join(__dirname, 'uncaughtexceptions')

//Multer allows us to receive multipart files (such as the crash report minidumps generated by Electron)
const upload = multer({
  dest: crashesPath,
}).single('upload_file_minidump')

app.post('/crashreports', upload, (request, response) => {
  //console.log(request.body)
  //console.log(request.file)
  //add the filename of the mini-dump and the current time to the JSON in the request body
  const body = {
    ...request.body,
    filename: request.file.filename,
    date: new Date(),
  }
  const filePath = `${request.file.path}.json`
  const report = JSON.stringify(body)

  //write the file to the filesystem
  writeFile(filePath, report, (error) => {
    if (error) return console.error('Error Saving', report)
    console.log('Crash Saved', filePath, report)
  })

  response.end()
})

app.post('/uncaughtexceptions', (request, response) => {
  //use the UUID module to create a unique identifier for the crash report
  const filePath = path.join(exceptionsPath, `${uuid()}.json`)
  const report = JSON.stringify({ ...request.body, date: new Date() })

  //write the report to the filesystem
  writeFile(filePath, report, (error) => {
    if (error) return console.error('Error Saving', report)
    console.log('Exception Saved', filePath, report)
  })

  response.end()
})

server.listen(3000, () => {
  console.log('Crash report server running on Port 3000.')
})
